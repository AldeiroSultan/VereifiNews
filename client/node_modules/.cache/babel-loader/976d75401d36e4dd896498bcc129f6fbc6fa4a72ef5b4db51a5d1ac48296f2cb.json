{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sulta\\\\Documents\\\\CodingProject\\\\VerifiNews\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Container, Box, Typography, useTheme } from '@mui/material';\nimport InputPanel from './components/InputPanel';\nimport ResultPanel from './components/ResultPanel';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport LoadingOverlay from './components/LoadingOverlay';\nimport { processArticleClientSide } from './utils/clientSummarizer';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const theme = useTheme();\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [articleText, setArticleText] = useState('');\n  const [activeModel, setActiveModel] = useState('client'); // 'client' or 'bart'\n\n  const handleSubmit = async (text, model, inputType = 'text') => {\n    if (!text.trim()) {\n      setError('Please enter article text or URL.');\n      return;\n    }\n\n    // Wait for button animation to complete before showing loading overlay\n    // This delay happens inside the AnimatedButton component\n\n    setLoading(true);\n    setError(null);\n    try {\n      let resultData;\n      let apiPayload = {};\n\n      // Prepare the API payload based on input type\n      if (inputType === 'text') {\n        apiPayload = {\n          text: text\n        };\n        setArticleText(text); // Store the original text\n      } else if (inputType === 'url') {\n        apiPayload = {\n          url: text\n        };\n        // Original text will be returned by the server\n      }\n      if (model === 'client') {\n        // If it's a URL and using client-side model, we need to extract content first\n        if (inputType === 'url') {\n          try {\n            const extractResponse = await axios.post('/api/extract-url', {\n              url: text\n            });\n            if (extractResponse.data && extractResponse.data.success) {\n              const extractedText = extractResponse.data.text;\n              setArticleText(extractedText);\n\n              // Now process the extracted text\n              resultData = processArticleClientSide(extractedText);\n            } else {\n              throw new Error(extractResponse.data.error || 'Failed to extract content from URL');\n            }\n          } catch (extractError) {\n            console.error('URL extraction error:', extractError);\n            setError('Failed to extract content from the URL. Please try pasting the article text directly.');\n            setLoading(false);\n            return;\n          }\n        } else {\n          // Process text directly using client-side algorithms\n          resultData = processArticleClientSide(text);\n        }\n\n        // Ensure default values for safety\n        if (!resultData.credibilityFactors) {\n          resultData.credibilityFactors = [];\n        }\n        setTimeout(() => {\n          setResult(resultData);\n          setLoading(false);\n        }, 1000); // Add slight delay for UX\n      } else {\n        // Process using server-side BART model\n        try {\n          const response = await axios.post('/api/summarize', {\n            ...apiPayload,\n            model_type: 'bart'\n          });\n          resultData = {\n            summary: response.data.summary || \"No summary generated.\",\n            credibilityScore: response.data.credibility_score || 50,\n            credibilityFactors: response.data.credibility_factors || []\n          };\n\n          // If we sent a URL, get the original text from the response\n          if (inputType === 'url' && response.data.original_text) {\n            setArticleText(response.data.original_text);\n          }\n          setResult(resultData);\n        } catch (apiError) {\n          var _apiError$response, _apiError$response$da;\n          console.error('API Error:', apiError);\n          if ((_apiError$response = apiError.response) !== null && _apiError$response !== void 0 && (_apiError$response$da = _apiError$response.data) !== null && _apiError$response$da !== void 0 && _apiError$response$da.error) {\n            setError(apiError.response.data.error);\n          } else {\n            setError('Backend server error. Please ensure the Flask server is running or try using the client-side model.');\n          }\n        }\n        setLoading(false);\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error('Error processing article:', err);\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || 'An error occurred while processing the article.');\n      setLoading(false);\n    }\n  };\n  const handleModelChange = model => {\n    setActiveModel(model);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      flexDirection: 'column',\n      minHeight: '100vh',\n      bgcolor: theme.palette.background.default\n    },\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      sx: {\n        flex: 1,\n        py: 4\n      },\n      children: [error && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          p: 2,\n          mb: 3,\n          bgcolor: theme.palette.mode === 'dark' ? 'rgba(239, 68, 68, 0.1)' : '#fee2e2',\n          color: theme.palette.mode === 'dark' ? '#f87171' : '#b91c1c',\n          borderRadius: 2,\n          border: '1px solid',\n          borderColor: theme.palette.mode === 'dark' ? 'rgba(239, 68, 68, 0.3)' : 'rgba(239, 68, 68, 0.2)'\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(InputPanel, {\n        onSubmit: handleSubmit,\n        activeModel: activeModel,\n        onModelChange: handleModelChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), result && !loading && /*#__PURE__*/_jsxDEV(ResultPanel, {\n        summary: result.summary,\n        credibilityScore: result.credibilityScore,\n        credibilityFactors: result.credibilityFactors,\n        articleText: articleText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(LoadingOverlay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"yRTmn18gd3m7UGYdJno1FDdsMmM=\", false, function () {\n  return [useTheme];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Container","Box","Typography","useTheme","InputPanel","ResultPanel","Header","Footer","LoadingOverlay","processArticleClientSide","axios","jsxDEV","_jsxDEV","App","_s","theme","result","setResult","loading","setLoading","error","setError","articleText","setArticleText","activeModel","setActiveModel","handleSubmit","text","model","inputType","trim","resultData","apiPayload","url","extractResponse","post","data","success","extractedText","Error","extractError","console","credibilityFactors","setTimeout","response","model_type","summary","credibilityScore","credibility_score","credibility_factors","original_text","apiError","_apiError$response","_apiError$response$da","err","_err$response","_err$response$data","handleModelChange","sx","display","flexDirection","minHeight","bgcolor","palette","background","default","children","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","flex","py","p","mb","mode","color","borderRadius","border","borderColor","variant","onSubmit","onModelChange","_c","$RefreshReg$"],"sources":["C:/Users/Sulta/Documents/CodingProject/VerifiNews/client/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Container, Box, Typography, useTheme } from '@mui/material';\r\nimport InputPanel from './components/InputPanel';\r\nimport ResultPanel from './components/ResultPanel';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\nimport LoadingOverlay from './components/LoadingOverlay';\r\nimport { processArticleClientSide } from './utils/clientSummarizer';\r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n  const theme = useTheme();\r\n  const [result, setResult] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [articleText, setArticleText] = useState('');\r\n  const [activeModel, setActiveModel] = useState('client'); // 'client' or 'bart'\r\n\r\n  const handleSubmit = async (text, model, inputType = 'text') => {\r\n    if (!text.trim()) {\r\n      setError('Please enter article text or URL.');\r\n      return;\r\n    }\r\n\r\n    // Wait for button animation to complete before showing loading overlay\r\n    // This delay happens inside the AnimatedButton component\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      let resultData;\r\n      let apiPayload = {};\r\n\r\n      // Prepare the API payload based on input type\r\n      if (inputType === 'text') {\r\n        apiPayload = { text: text };\r\n        setArticleText(text); // Store the original text\r\n      } else if (inputType === 'url') {\r\n        apiPayload = { url: text };\r\n        // Original text will be returned by the server\r\n      }\r\n\r\n      if (model === 'client') {\r\n        // If it's a URL and using client-side model, we need to extract content first\r\n        if (inputType === 'url') {\r\n          try {\r\n            const extractResponse = await axios.post('/api/extract-url', { url: text });\r\n            if (extractResponse.data && extractResponse.data.success) {\r\n              const extractedText = extractResponse.data.text;\r\n              setArticleText(extractedText);\r\n              \r\n              // Now process the extracted text\r\n              resultData = processArticleClientSide(extractedText);\r\n            } else {\r\n              throw new Error(extractResponse.data.error || 'Failed to extract content from URL');\r\n            }\r\n          } catch (extractError) {\r\n            console.error('URL extraction error:', extractError);\r\n            setError('Failed to extract content from the URL. Please try pasting the article text directly.');\r\n            setLoading(false);\r\n            return;\r\n          }\r\n        } else {\r\n          // Process text directly using client-side algorithms\r\n          resultData = processArticleClientSide(text);\r\n        }\r\n        \r\n        // Ensure default values for safety\r\n        if (!resultData.credibilityFactors) {\r\n          resultData.credibilityFactors = [];\r\n        }\r\n        \r\n        setTimeout(() => {\r\n          setResult(resultData);\r\n          setLoading(false);\r\n        }, 1000); // Add slight delay for UX\r\n      } else {\r\n        // Process using server-side BART model\r\n        try {\r\n          const response = await axios.post('/api/summarize', {\r\n            ...apiPayload,\r\n            model_type: 'bart'\r\n          });\r\n          \r\n          resultData = {\r\n            summary: response.data.summary || \"No summary generated.\",\r\n            credibilityScore: response.data.credibility_score || 50,\r\n            credibilityFactors: response.data.credibility_factors || []\r\n          };\r\n          \r\n          // If we sent a URL, get the original text from the response\r\n          if (inputType === 'url' && response.data.original_text) {\r\n            setArticleText(response.data.original_text);\r\n          }\r\n          \r\n          setResult(resultData);\r\n        } catch (apiError) {\r\n          console.error('API Error:', apiError);\r\n          if (apiError.response?.data?.error) {\r\n            setError(apiError.response.data.error);\r\n          } else {\r\n            setError('Backend server error. Please ensure the Flask server is running or try using the client-side model.');\r\n          }\r\n        }\r\n        setLoading(false);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error processing article:', err);\r\n      setError(err.response?.data?.error || 'An error occurred while processing the article.');\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleModelChange = (model) => {\r\n    setActiveModel(model);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ \r\n      display: 'flex', \r\n      flexDirection: 'column', \r\n      minHeight: '100vh',\r\n      bgcolor: theme.palette.background.default\r\n    }}>\r\n      <Header />\r\n      \r\n      <Container maxWidth=\"lg\" sx={{ flex: 1, py: 4 }}>\r\n        {error && (\r\n          <Box sx={{ \r\n            p: 2, \r\n            mb: 3, \r\n            bgcolor: theme.palette.mode === 'dark' ? 'rgba(239, 68, 68, 0.1)' : '#fee2e2', \r\n            color: theme.palette.mode === 'dark' ? '#f87171' : '#b91c1c',\r\n            borderRadius: 2,\r\n            border: '1px solid',\r\n            borderColor: theme.palette.mode === 'dark' ? 'rgba(239, 68, 68, 0.3)' : 'rgba(239, 68, 68, 0.2)',\r\n          }}>\r\n            <Typography variant=\"body1\">{error}</Typography>\r\n          </Box>\r\n        )}\r\n        \r\n        <InputPanel \r\n          onSubmit={handleSubmit} \r\n          activeModel={activeModel}\r\n          onModelChange={handleModelChange}\r\n        />\r\n        \r\n        {result && !loading && (\r\n          <ResultPanel \r\n            summary={result.summary} \r\n            credibilityScore={result.credibilityScore} \r\n            credibilityFactors={result.credibilityFactors}\r\n            articleText={articleText}\r\n          />\r\n        )}\r\n      </Container>\r\n      \r\n      <Footer />\r\n      \r\n      {loading && <LoadingOverlay />}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}